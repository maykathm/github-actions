name: Tests results commenter

on:
  workflow_run:
    workflows: [Tests]
    types:
      - completed

jobs:
  report-spread-results:
    runs-on: ubuntu-latest
    permissions: 
      actions: write
      pull-requests: write
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4  

      - name: Get generated data
        uses: actions/github-script@v6
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });
            console.log("All artifacts found:", allArtifacts.data.artifacts);
            console.log("Things to match are: ", `results-${context.payload.workflow_run.id}-${context.payload.workflow_run.run_attempt}`);
            let matchingArtifacts = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name.startsWith(`results-${context.payload.workflow_run.id}-${context.payload.workflow_run.run_attempt}`);
            });
            console.log("Matching artifacts:", matchingArtifacts);
            for (let artifact of matchingArtifacts) {
              let download = await github.rest.actions.downloadArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id,
                archive_format: 'zip',
              });
              let fs = require('fs');
              fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/${artifact.name}.zip`, Buffer.from(download.data));
              console.log(`Downloaded artifact: ${artifact.name}.zip`);
            }

      - name: Echo collected output
        run: |
          ls -la .
          find . -name "*.zip" | while read filename; do 
            dir="${filename%.zip}"
            mkdir $dir
            unzip $filename -d $dir
          done

          report="$(date)\n"
          if ! ls results-*/*.json &> /dev/null; then
            report+="## No spread failures"
          else
            jq -s 'add' results*/*.json > consolidated-report.json

            report+="## Failures:\n"
            if [[ $(jq -r '.[] | select( .info_type == "Error" ) | select( .verb == "preparing" )' consolidated-report.json) ]]; then
              report+="### Prepare:\n"
              report+=$(jq -r '.[] | select( .info_type == "Error" ) | select( .verb == "preparing" ) .task' consolidated-report.json | while read line; do echo "- $line\n"; done)
            fi
            if [[ $(jq -r '.[] | select( .info_type == "Error" ) | select( .verb == "executing" )' consolidated-report.json) ]]; then
              report+="### Executing:\n"
              report+=$(jq -r '.[] | select( .info_type == "Error" ) | select( .verb == "executing" ) .task' consolidated-report.json | while read line; do echo "- $line\n"; done)
            fi
            if [[ $(jq -r '.[] | select( .info_type == "Error" ) | select( .verb == "restoring" )' consolidated-report.json) ]]; then
              report+="### Restoring:\n"
              report+=$(jq -r '.[] | select( .info_type == "Error" ) | select( .verb == "restoring" ) .task' consolidated-report.json | while read line; do echo "- $line\n"; done)
            fi
          fi
          echo -e "$report" > report
          echo ${{ github.event.workflow_run }}
          echo ${{ github.event.workflow_run.pull_requests }}
          echo ${{ github.event.workflow_run.pull_requests[0] }}

      - name: Comment report to PR
        if: ${{ github.event.workflow_run.pull_requests[0] }}
        run: |
          if ! gh pr comment "${{ github.event.workflow_run.pull_requests[0].id }}" --body "$(cat report)" --edit-last; then
            gh pr comment "${{ github.event.workflow_run.pull_requests[0].id }}" --body "$(cat report)"
          fi
      
      - name: Write report to test summary
        run: cat report >> $GITHUB_STEP_SUMMARY


      - name: Delete artifacts
        run: |
          artifact_ids=$(gh api /repos/${{ github.repository }}/actions/artifacts | jq -r '.artifacts[] | select(.name|startswith("results-${{ github.event.workflow_run.id }}-${{ github.event.workflow_run.run_attempt }}-")) | "\(.id)"')
          for artifact_id in $artifact_ids; do 
          echo "planning to delete $artifact_id"; 
          gh api -X delete /repos/${{ github.repository }}/actions/artifacts/$artifact_id
          done