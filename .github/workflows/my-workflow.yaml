on:
  workflow_call:
    inputs:
      other-input:
        required: false
        type: string
      runs-on:
        required: true
        type: string
      boolean-var:
        required: false
        type: boolean
        default: false
      is-fund:
        required: false
        type: boolean
        default: false
      channel:
        required: true
        type: string
      go-build-tags:
        description: 'Tag to add to go test'
        type: string
        required: false
      go-test-race:
        description: 'If true, will add race tag to go test'
        type: boolean
        default: false
        required: false
      snapd-debug:
        description: 'If true, will set SNAPD_DEBUG=1'
        type: boolean
        default: false
        required: false

jobs:
  test-things:
    name: "bob${{ inputs.boolean-var && ' with-bool-var' || '' }}
          and more ${{ inputs.other-input }}"
    runs-on: ${{ fromJSON(inputs.runs-on) }}
    steps:
    - name: Read inputs
      run: |
        echo "${{ toJSON(inputs.runs-on) }}"
        printf "%s" "${{ toJSON(inputs.runs-on) }}"

    - name: Print job name
      run: |
        fundamental=""
        if [ "${{ inputs.is-fund }}" == 'true' ]; then
          fundamental="#fundamental"
        fi
        echo "-- $fundamental --"

    - name: boolean-var is true
      if: "${{ inputs.boolean-var }}"
      run: |
        if [ "${{ inputs.boolean-var }}" = true ]; then
          echo "The variable evaluates as true and is ${{ fromJSON(inputs.boolean-var) }}"
        else
          echo "The variable evaluates as false and is ${{ fromJSON(inputs.boolean-var) }}"
        fi

        if [ "${{ inputs.boolean-var }}" = false ]; then
          echo "The variable evaluates as false and is ${{ fromJSON(inputs.boolean-var) }}"
        else
          echo "The variable evaluates as true and is ${{ fromJSON(inputs.boolean-var) }}"
        fi
            
    - name: boolean-var is false
      if: "${{ !inputs.boolean-var }}"
      run: |
        if [ "${{ inputs.boolean-var }}" = true ]; then
          echo "The variable evaluates as true and is ${{ fromJSON(inputs.boolean-var) }}"
        else
          echo "The variable evaluates as false and is ${{ fromJSON(inputs.boolean-var) }}"
        fi

        if [ "${{ inputs.boolean-var }}" = false ]; then
          echo "The variable evaluates as false and is ${{ fromJSON(inputs.boolean-var) }}"
        else
          echo "The variable evaluates as true and is ${{ fromJSON(inputs.boolean-var) }}"
        fi

    - name: boolean-var and runner 0
      if: "${{ !inputs.boolean-var && !endsWith(inputs.other-input, '-fips') }}"
      run: |
        echo "hello"

    - name: boolean-var and runner 1
      if: "${{ !inputs.boolean-var && !endsWith(inputs.other-input, 'ings') }}"
      run: |
        echo "hello"

    - name: boolean-var and runner 2
      if: "${{ inputs.boolean-var && !endsWith(inputs.other-input, '-fips') }}"
      run: |
        echo "hello"

    - name: boolean-var and runner 3
      if: "${{ inputs.boolean-var && !endsWith(inputs.other-input, 'ings') }}"
      run: |
        echo "hello"

    - name: create file
      run: |
        echo "hello" > world

    - name: Create coverage results name
      run: |
        converted=$(sed 's/\//-/g' <<<${{ inputs.channel }})
        name="coverage-files-${converted}-${{ inputs.go-build-tags || 'notags' }}${{ inputs.go-test-race && '-race' || ''}}${{ inputs.snapd-debug && '-snapddebug' || ''}}"
        echo "COVERAGE_NAME=$name" >> $GITHUB_ENV

    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        name: "${{ env.COVERAGE_NAME }}"
        path: "${{ github.workspace }}/world"